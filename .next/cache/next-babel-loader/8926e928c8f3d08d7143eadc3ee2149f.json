{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\home\\\\next_app\\\\components\\\\QR_sample.js\";\nimport React, { Component } from 'react';\nimport firebase from \"firebase\";\nimport \"firebase/storage\";\nimport { useQRCode } from 'react-hook-qrcode';\nimport Link from 'next/link';\nimport QRCode from \"qrcode.react\";\n\nclass QR_sample extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: []\n    };\n    this.getFireData();\n  }\n\n  getFireData() {\n    let db = firebase.database();\n    let ref = db.ref('BodyTemperature/');\n    let self = this;\n    ref.orderByKey().limitToLast(1).on('value', snapshot => {\n      self.setState({\n        data: snapshot.val()\n      });\n    });\n    let Temp = this.state.data.T;\n    let Num = this.state.data.N;\n    let Day = this.state.data.C; //return Temp;\n  }\n\n  getTableData() {\n    let result = [];\n\n    if (this.state.data == null || this.state.data.length == 0) {\n      return [/*#__PURE__*/_jsxDEV(\"tr\", {\n        children: /*#__PURE__*/_jsxDEV(\"th\", {\n          children: \"NO DATA.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 27\n        }, this)\n      }, \"0\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 15\n      }, this)];\n    }\n\n    for (let i in this.state.data) {\n      result.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: [/*#__PURE__*/_jsxDEV(\"th\", {\n          children: this.state.data[i].C\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: this.state.data[i].N\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n          children: this.state.data[i].T\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 9\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 19\n      }, this));\n    }\n\n    return result;\n  } // getQR(){\n  //   const [inputRef] = useQRCode({\n  //     text: '体温：',\n  //     options: {\n  //       level: 'M',\n  //       margin: 7,\n  //       scale: 1,\n  //       width: 200,\n  //       color: {\n  //         dark: '#00bfff',\n  //         light: '#ffffff',\n  //       },\n  //     },\n  //   });\n  //   const ref = {inputRef};\n  //   return ref;\n  // }\n\n\n  render() {\n    let Temp = kasu;\n    let unko = \"unko\" + Temp;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\u5065\\u5EB7\\u72B6\\u614B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(QRCode, {\n          value: this.getTableData()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        href: \"/other\",\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          children: \"Back to Home\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default QR_sample;","map":{"version":3,"sources":["C:/home/next_app/components/QR_sample.js"],"names":["React","Component","firebase","useQRCode","Link","QRCode","QR_sample","constructor","props","state","data","getFireData","db","database","ref","self","orderByKey","limitToLast","on","snapshot","setState","val","Temp","T","Num","N","Day","C","getTableData","result","length","i","push","render","kasu","unko"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAO,kBAAP;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,cAAnB;;AAEA,MAAMC,SAAN,SAAwBL,SAAxB,CAAkC;AAEhCM,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAC;AADM,KAAb;AAGA,SAAKC,WAAL;AAED;;AAEDA,EAAAA,WAAW,GAAE;AACX,QAAIC,EAAE,GAAGV,QAAQ,CAACW,QAAT,EAAT;AACA,QAAIC,GAAG,GAAGF,EAAE,CAACE,GAAH,CAAO,kBAAP,CAAV;AACA,QAAIC,IAAI,GAAI,IAAZ;AACAD,IAAAA,GAAG,CAACE,UAAJ,GACGC,WADH,CACe,CADf,EAEGC,EAFH,CAEM,OAFN,EAEgBC,QAAD,IAAY;AACvBJ,MAAAA,IAAI,CAACK,QAAL,CAAc;AACZV,QAAAA,IAAI,EAACS,QAAQ,CAACE,GAAT;AADO,OAAd;AAGH,KAND;AAOA,QAAIC,IAAI,GAAG,KAAKb,KAAL,CAAWC,IAAX,CAAgBa,CAA3B;AACA,QAAIC,GAAG,GAAG,KAAKf,KAAL,CAAWC,IAAX,CAAgBe,CAA1B;AACA,QAAIC,GAAG,GAAG,KAAKjB,KAAL,CAAWC,IAAX,CAAgBiB,CAA1B,CAbW,CAcX;AACD;;AAEDC,EAAAA,YAAY,GAAE;AACZ,QAAIC,MAAM,GAAG,EAAb;;AACA,QAAI,KAAKpB,KAAL,CAAWC,IAAX,IAAmB,IAAnB,IAA2B,KAAKD,KAAL,CAAWC,IAAX,CAAgBoB,MAAhB,IAA0B,CAAzD,EAA2D;AACzD,aAAO,cAAC;AAAA,+BAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAZ,SAAQ,GAAR;AAAA;AAAA;AAAA;AAAA,cAAD,CAAP;AACD;;AACD,SAAI,IAAIC,CAAR,IAAa,KAAKtB,KAAL,CAAWC,IAAxB,EAA6B;AAC3BmB,MAAAA,MAAM,CAACG,IAAP,eAAY;AAAA,gCACV;AAAA,oBAAK,KAAKvB,KAAL,CAAWC,IAAX,CAAgBqB,CAAhB,EAAmBJ;AAAxB;AAAA;AAAA;AAAA;AAAA,gBADU,eAEV;AAAA,oBAAK,KAAKlB,KAAL,CAAWC,IAAX,CAAgBqB,CAAhB,EAAmBN;AAAxB;AAAA;AAAA;AAAA;AAAA,gBAFU,eAGV;AAAA,oBAAK,KAAKhB,KAAL,CAAWC,IAAX,CAAgBqB,CAAhB,EAAmBR;AAAxB;AAAA;AAAA;AAAA;AAAA,gBAHU;AAAA,SAASQ,CAAT;AAAA;AAAA;AAAA;AAAA,cAAZ;AAKD;;AACD,WAAOF,MAAP;AACD,GAzC+B,CA2ChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAI,EAAAA,MAAM,GAAE;AACN,QAAIX,IAAI,GAAGY,IAAX;AACA,QAAIC,IAAI,GAAG,SAASb,IAApB;AACA,wBACE;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,+BACE,QAAC,MAAD;AAAQ,UAAA,KAAK,EAAG,KAAKM,YAAL;AAAhB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAFJ,eAKI,QAAC,IAAD;AAAM,QAAA,IAAI,EAAC,QAAX;AAAA,+BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cALJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAWD;;AA3E+B;;AA+ElC,eAAetB,SAAf","sourcesContent":["import React, {Component} from 'react'\r\nimport firebase from \"firebase\";\r\nimport \"firebase/storage\";\r\nimport { useQRCode } from 'react-hook-qrcode';\r\nimport Link from 'next/link';\r\nimport QRCode from \"qrcode.react\";\r\n\r\nclass QR_sample extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data:[]\r\n    }\r\n    this.getFireData();\r\n\r\n  }\r\n\r\n  getFireData(){\r\n    let db = firebase.database();\r\n    let ref = db.ref('BodyTemperature/');\r\n    let self  = this;\r\n    ref.orderByKey()\r\n      .limitToLast(1)\r\n      .on('value', (snapshot)=>{\r\n        self.setState({\r\n          data:snapshot.val()\r\n        });\r\n    });\r\n    let Temp = this.state.data.T;\r\n    let Num = this.state.data.N;\r\n    let Day = this.state.data.C;\r\n    //return Temp;\r\n  }\r\n\r\n  getTableData(){\r\n    let result = [];\r\n    if (this.state.data == null || this.state.data.length == 0){\r\n      return [<tr key=\"0\"><th>NO DATA.</th></tr>];\r\n    }\r\n    for(let i in this.state.data){\r\n      result.push(<tr key={i}>\r\n        <th>{this.state.data[i].C}</th>\r\n        <td>{this.state.data[i].N}</td>\r\n        <td>{this.state.data[i].T}</td>\r\n      </tr>);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  // getQR(){\r\n  //   const [inputRef] = useQRCode({\r\n  //     text: '体温：',\r\n  //     options: {\r\n  //       level: 'M',\r\n  //       margin: 7,\r\n  //       scale: 1,\r\n  //       width: 200,\r\n  //       color: {\r\n  //         dark: '#00bfff',\r\n  //         light: '#ffffff',\r\n  //       },\r\n  //     },\r\n  //   });\r\n  //   const ref = {inputRef};\r\n  //   return ref;\r\n  // }\r\n\r\n  render(){\r\n    let Temp = kasu;\r\n    let unko = \"unko\" + Temp;\r\n    return (\r\n      <div>\r\n          <h1>健康状態</h1>\r\n          <div>\r\n            <QRCode value= {this.getTableData()} />\r\n          </div>\r\n          <Link href=\"/other\">\r\n            <a>Back to Home</a>\r\n          </Link>\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n}\r\nexport default QR_sample;\r\n"]},"metadata":{},"sourceType":"module"}